-- =====================================================
-- Cleanup (drop in dependency order, CASCADE as needed)
-- =====================================================

DROP VIEW IF EXISTS positions_aggregate CASCADE;
DROP VIEW IF EXISTS positions_live CASCADE;

DROP TABLE IF EXISTS rag_chunks CASCADE;
DROP TABLE IF EXISTS rag_documents CASCADE;
DROP TABLE IF EXISTS cash_events CASCADE;
DROP TABLE IF EXISTS trades CASCADE;
DROP TABLE IF EXISTS instruments CASCADE;
DROP TABLE IF EXISTS portfolios CASCADE;


-- Safe re-run: drop tables before recreation
DROP TABLE IF EXISTS analytics.attribution_brinson_daily CASCADE;
DROP TABLE IF EXISTS analytics.returns_portfolio_daily CASCADE;
DROP TABLE IF EXISTS analytics.returns_security_daily CASCADE;
DROP TABLE IF EXISTS analytics.benchmark_segments_daily CASCADE;
DROP TABLE IF EXISTS analytics.holdings_daily CASCADE;
DROP TABLE IF EXISTS analytics.daily_prices CASCADE;
DROP TABLE IF EXISTS analytics.benchmarks CASCADE;

--------------------------
-- Extensions (required)
--------------------------
CREATE EXTENSION IF NOT EXISTS vector;
CREATE EXTENSION IF NOT EXISTS pg_trgm;

--------------------------
-- Core reference tables
--------------------------

-- Portfolios (int PK + unique code)
CREATE TABLE IF NOT EXISTS portfolios (
  id                INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  code              TEXT UNIQUE,                 -- human code PMs use (e.g., ALPHA)
  name              TEXT NOT NULL
);

-- Instruments (int PK + unique ticker)
CREATE TABLE IF NOT EXISTS instruments (
  id                INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ticker            TEXT UNIQUE NOT NULL,        -- e.g., IBM
  asset_class       TEXT NOT NULL,               -- 'EQUITY' | 'BOND' | etc
  currency          TEXT NOT NULL DEFAULT 'USD',
  price_last        NUMERIC(18,6),
  price_time        TIMESTAMPTZ
);

-- ------------------------
-- Transactional tables
-- ------------------------

-- Trades (simplified)
CREATE TABLE IF NOT EXISTS trades (
  trade_id          TEXT PRIMARY KEY,
  portfolio_id      INT NOT NULL REFERENCES portfolios(id),
  instrument_id     INT NOT NULL REFERENCES instruments(id),
  side              TEXT NOT NULL CHECK (side IN ('BUY','SELL')),
  qty               NUMERIC(20,6) NOT NULL,
  price             NUMERIC(18,6) NOT NULL,
  trade_dt          TIMESTAMPTZ NOT NULL,
  settle_dt         TIMESTAMPTZ NOT NULL,
  fees              NUMERIC(18,6) DEFAULT 0
);

-- Cash events (for projections)
CREATE TABLE IF NOT EXISTS cash_events (
  id                BIGSERIAL PRIMARY KEY,
  portfolio_id      INT NOT NULL REFERENCES portfolios(id),
  ccy               TEXT NOT NULL DEFAULT 'USD',
  value_dt          DATE NOT NULL,
  amount            NUMERIC(18,6) NOT NULL,
  description       TEXT
);

-- ------------------------
-- RAG metadata + chunks
-- ------------------------

-- Documents the PMs create or external sources you ingest
CREATE TABLE IF NOT EXISTS rag_documents (
  doc_id            UUID PRIMARY KEY,
  source_uri        TEXT NOT NULL,               -- e.g., note:<uuid> or s3://... or jira:123
  source_type       TEXT NOT NULL,               -- e.g., pm_ui, email, jira, slack
  title             TEXT,
  author            TEXT,
  created_at        TIMESTAMPTZ,
  updated_at        TIMESTAMPTZ,
  meta              JSONB NOT NULL DEFAULT '{}', -- arbitrary metadata

  -- Linkage to structured world via integer keys
  instrument_int_ids INT[] NOT NULL DEFAULT '{}',
  portfolio_int_ids  INT[] NOT NULL DEFAULT '{}'
);

-- Chunked content with embeddings
CREATE TABLE IF NOT EXISTS rag_chunks (
  id                BIGSERIAL PRIMARY KEY,
  doc_id            UUID NOT NULL REFERENCES rag_documents(doc_id) ON DELETE CASCADE,
  chunk_idx         INT NOT NULL,
  content           TEXT NOT NULL,
  content_hash      TEXT NOT NULL,
  embedding         VECTOR(1536) NOT NULL,
  UNIQUE (doc_id, content_hash)
);

-- ------------------------
-- Views for live positions
-- ------------------------

-- Live position by portfolio and instrument (signed qty)
CREATE OR REPLACE VIEW positions_live AS
SELECT
  t.portfolio_id,
  t.instrument_id,
  SUM(CASE WHEN t.side = 'BUY' THEN t.qty ELSE -t.qty END) AS qty
FROM trades t
GROUP BY 1,2;

-- Aggregate across all portfolios for an instrument
CREATE OR REPLACE VIEW positions_aggregate AS
SELECT
  instrument_id,
  SUM(qty) AS qty
FROM positions_live
GROUP BY 1;

--------------------------
-- Helpful indexes
--------------------------

-- Search notes quickly by text similarity
CREATE INDEX IF NOT EXISTS idx_rag_chunks_trgm
  ON rag_chunks USING gin (content gin_trgm_ops);

-- Fast filter by linkage arrays
CREATE INDEX IF NOT EXISTS idx_rag_docs_instr_int
  ON rag_documents USING gin (instrument_int_ids);
CREATE INDEX IF NOT EXISTS idx_rag_docs_portf_int
  ON rag_documents USING gin (portfolio_int_ids);

-- Optional vector ANN index (requires pgvector ivfflat)
-- You can tune lists (e.g., 100) after ANALYZE for your dataset size
-- CREATE INDEX IF NOT EXISTS idx_rag_chunks_embedding_ivfflat
--   ON rag_chunks USING ivfflat (embedding vector_l2_ops) WITH (lists = 100);

-- Basic helpful indexes for transactions
CREATE INDEX IF NOT EXISTS idx_trades_instrument ON trades (instrument_id);
CREATE INDEX IF NOT EXISTS idx_trades_portfolio  ON trades (portfolio_id);
CREATE INDEX IF NOT EXISTS idx_trades_trade_dt   ON trades (trade_dt);

CREATE INDEX IF NOT EXISTS idx_cash_events_portfolio ON cash_events (portfolio_id);
CREATE INDEX IF NOT EXISTS idx_cash_events_value_dt  ON cash_events (value_dt);

-- =====================================================================
-- Schema for Performance & Attribution
-- =====================================================================

CREATE SCHEMA IF NOT EXISTS analytics;

-- Optional: a simple benchmarks catalog
CREATE TABLE IF NOT EXISTS analytics.benchmarks (
    id              SERIAL PRIMARY KEY,
    code            TEXT UNIQUE NOT NULL,   -- e.g., "SPX", "NDX", "AGG"
    name            TEXT NOT NULL,
    base_currency   TEXT NOT NULL DEFAULT 'USD'
);

COMMENT ON TABLE analytics.benchmarks IS 'Catalog of benchmarks used for attribution & comparisons';

-- =====================================================================
-- 1) Daily instrument prices (+ optional FX factor to convert to base)
-- =====================================================================

CREATE TABLE IF NOT EXISTS analytics.daily_prices (
    instrument_id    INTEGER NOT NULL,
    price_as_of_date DATE    NOT NULL,
    close_price      NUMERIC(20,8) NOT NULL,
    currency         TEXT    NOT NULL,
    fx_to_base       NUMERIC(20,10), -- if you pre-store FX to your reporting base

    CONSTRAINT pk_daily_prices PRIMARY KEY (instrument_id, price_as_of_date),
    CONSTRAINT fk_dp_instrument FOREIGN KEY (instrument_id)
        REFERENCES instruments(id) ON DELETE RESTRICT
);

CREATE INDEX IF NOT EXISTS ix_daily_prices_date ON analytics.daily_prices (price_as_of_date);
CREATE INDEX IF NOT EXISTS ix_daily_prices_instr ON analytics.daily_prices (instrument_id);

COMMENT ON TABLE analytics.daily_prices IS 'End-of-day close prices per instrument';
COMMENT ON COLUMN analytics.daily_prices.fx_to_base IS 'Optional: FX rate to convert to reporting base on price_date';

-- =====================================================================
-- 2) Distributions (dividends/coupons) â€” optional but recommended
-- =====================================================================

CREATE TABLE IF NOT EXISTS analytics.daily_distributions (
    instrument_id   INTEGER NOT NULL,
    ex_date         DATE    NOT NULL,
    amount          NUMERIC(20,8) NOT NULL,
    currency        TEXT    NOT NULL,
    dist_type       TEXT    NOT NULL CHECK (dist_type IN ('DIVIDEND','COUPON')),

    CONSTRAINT pk_daily_distributions PRIMARY KEY (instrument_id, ex_date, dist_type),
    CONSTRAINT fk_dd_instrument FOREIGN KEY (instrument_id)
        REFERENCES instruments(id) ON DELETE RESTRICT
);

CREATE INDEX IF NOT EXISTS ix_daily_distributions_date ON analytics.daily_distributions (ex_date);

COMMENT ON TABLE analytics.daily_distributions IS 'Cash distributions (dividends, coupons) on ex-date';

-- =====================================================================
-- 3) Holdings snapshot at start of day (weights pre-computed for speed)
-- =====================================================================

CREATE TABLE IF NOT EXISTS analytics.holdings_daily (
    portfolio_id       INTEGER NOT NULL,
    holding_as_of_date DATE    NOT NULL,
    instrument_id   INTEGER NOT NULL,
    quantity        NUMERIC(28,10) NOT NULL,
    mv_base         NUMERIC(28,10) NOT NULL,     -- converted to reporting base
    weight          NUMERIC(18,12) NOT NULL,     -- 0..1
    segment_key     TEXT    NOT NULL,            -- e.g., sector/country/asset class

    CONSTRAINT pk_holdings_daily PRIMARY KEY (portfolio_id, holding_as_of_date, instrument_id),
    CONSTRAINT fk_hd_portfolio FOREIGN KEY (portfolio_id)
        REFERENCES portfolios(id) ON DELETE RESTRICT,
    CONSTRAINT fk_hd_instrument FOREIGN KEY (instrument_id)
        REFERENCES instruments(id) ON DELETE RESTRICT,
    CONSTRAINT ck_hd_weight CHECK (weight >= 0 AND weight <= 1)
);

CREATE INDEX IF NOT EXISTS ix_hd_pf_date ON analytics.holdings_daily (portfolio_id, holding_as_of_date);
CREATE INDEX IF NOT EXISTS ix_hd_segment ON analytics.holdings_daily (portfolio_id, holding_as_of_date, segment_key);

COMMENT ON TABLE analytics.holdings_daily IS 'Start-of-day holdings & weights by instrument and segment';

-- =====================================================================
-- 4) Security-level daily returns (portfolio perspective)
-- =====================================================================

CREATE TABLE IF NOT EXISTS analytics.returns_security_daily (
    portfolio_id      INTEGER NOT NULL,
    instrument_id     INTEGER NOT NULL,
    return_as_of_date DATE    NOT NULL,
    return            NUMERIC(18,12) NOT NULL,     -- e.g., -0.025000000000
    segment_key       TEXT    NOT NULL,

    CONSTRAINT pk_rs_daily PRIMARY KEY (portfolio_id, instrument_id, return_as_of_date),
    CONSTRAINT fk_rs_portfolio FOREIGN KEY (portfolio_id)
        REFERENCES portfolios(id) ON DELETE RESTRICT,
    CONSTRAINT fk_rs_instrument FOREIGN KEY (instrument_id)
        REFERENCES instruments(id) ON DELETE RESTRICT,
    CONSTRAINT ck_rs_return CHECK (return > -1.0 AND return < 100.0)  -- guard rails
);

CREATE INDEX IF NOT EXISTS ix_rs_pf_date ON analytics.returns_security_daily (portfolio_id, return_as_of_date);
CREATE INDEX IF NOT EXISTS ix_rs_segment ON analytics.returns_security_daily (portfolio_id, return_as_of_date, segment_key);

COMMENT ON TABLE analytics.returns_security_daily IS 'Per-instrument daily return within a portfolio';

-- =====================================================================
-- 5) Portfolio-level daily TWRR
-- =====================================================================

CREATE TABLE IF NOT EXISTS analytics.returns_portfolio_daily (
    portfolio_id       INTEGER NOT NULL,
    return_as_of_date  DATE    NOT NULL,
    twrr               NUMERIC(18,12) NOT NULL,     -- daily time-weighted return
    total_mv_base      NUMERIC(28,10),              -- optional diagnostic

    CONSTRAINT pk_rp_daily PRIMARY KEY (portfolio_id, return_as_of_date),
    CONSTRAINT fk_rp_portfolio FOREIGN KEY (portfolio_id)
        REFERENCES portfolios(id) ON DELETE RESTRICT,
    CONSTRAINT ck_rp_twrr CHECK (twrr > -1.0 AND twrr < 100.0)
);

CREATE INDEX IF NOT EXISTS ix_rp_pf_date ON analytics.returns_portfolio_daily (portfolio_id, return_as_of_date);

COMMENT ON TABLE analytics.returns_portfolio_daily IS 'Portfolio daily time-weighted return (TWRR)';

-- =====================================================================
-- 6) Benchmark segment weights & returns (daily)
-- =====================================================================

CREATE TABLE IF NOT EXISTS analytics.benchmark_segments_daily (
    benchmark_id            INTEGER NOT NULL,
    benchmark_as_of_date    DATE    NOT NULL,
    segment_key             TEXT    NOT NULL,
    benchmark_weight        NUMERIC(18,12) NOT NULL,     -- 0..1
    benchmark_return_segment NUMERIC(18,12) NOT NULL,

    CONSTRAINT pk_bm_seg_daily PRIMARY KEY (benchmark_id, benchmark_as_of_date, segment_key),
    CONSTRAINT fk_bm_seg_bm FOREIGN KEY (benchmark_id)
        REFERENCES analytics.benchmarks(id) ON DELETE RESTRICT,
    CONSTRAINT ck_bm_weight CHECK (benchmark_weight >= 0 AND benchmark_weight <= 1),
    CONSTRAINT ck_bm_return CHECK (benchmark_return_segment > -1.0 AND benchmark_return_segment < 100.0)
);

CREATE INDEX IF NOT EXISTS ix_bm_seg_date ON analytics.benchmark_segments_daily (benchmark_as_of_date, segment_key);

COMMENT ON TABLE analytics.benchmark_segments_daily IS 'Per-segment benchmark weights and segment returns by day';

-- =====================================================================
-- 7) Brinson-Fachler attribution (daily, by segment)
-- =====================================================================

CREATE TABLE IF NOT EXISTS analytics.attribution_brinson_daily (
    portfolio_id           INTEGER NOT NULL,
    benchmark_id           INTEGER NOT NULL,
    attribution_as_of_date DATE    NOT NULL,
    segment_key            TEXT    NOT NULL,
    alloc_contrib          NUMERIC(18,12) NOT NULL,
    sel_contrib            NUMERIC(18,12) NOT NULL,
    int_contrib            NUMERIC(18,12) NOT NULL,
    total_contrib          NUMERIC(18,12) NOT NULL, -- usually = alloc + sel + int

    CONSTRAINT pk_attr_brinson_daily PRIMARY KEY (portfolio_id, benchmark_id, attribution_as_of_date, segment_key),
    CONSTRAINT fk_abd_portfolio FOREIGN KEY (portfolio_id)
        REFERENCES portfolios(id) ON DELETE RESTRICT,
    CONSTRAINT fk_abd_benchmark FOREIGN KEY (benchmark_id)
        REFERENCES analytics.benchmarks(id) ON DELETE RESTRICT
);

CREATE INDEX IF NOT EXISTS ix_abd_pf_date ON analytics.attribution_brinson_daily (portfolio_id, attribution_as_of_date);
CREATE INDEX IF NOT EXISTS ix_abd_bm_date ON analytics.attribution_brinson_daily (benchmark_id, attribution_as_of_date);

COMMENT ON TABLE analytics.attribution_brinson_daily IS 'Daily Brinson-Fachler attribution by segment';

-- =====================================================================
-- 8) Brinson-Fachler attribution (period rollup)
-- =====================================================================

CREATE TABLE IF NOT EXISTS analytics.attribution_brinson_period (
    portfolio_id            INTEGER NOT NULL,
    benchmark_id            INTEGER NOT NULL,
    from_date               DATE    NOT NULL,
    to_date                 DATE    NOT NULL,
    segment_key             TEXT    NOT NULL,

    alloc_contrib           NUMERIC(18,12) NOT NULL,
    sel_contrib             NUMERIC(18,12) NOT NULL,
    int_contrib             NUMERIC(18,12) NOT NULL,
    total_contrib           NUMERIC(18,12) NOT NULL,

    portfolio_return_period NUMERIC(18,12) NOT NULL,
    benchmark_return_period NUMERIC(18,12) NOT NULL,
    excess_return_period    NUMERIC(18,12) NOT NULL,

    CONSTRAINT pk_attr_brinson_period PRIMARY KEY (portfolio_id, benchmark_id, from_date, to_date, segment_key),
    CONSTRAINT fk_abp_portfolio FOREIGN KEY (portfolio_id)
        REFERENCES portfolios(id) ON DELETE RESTRICT,
    CONSTRAINT fk_abp_benchmark FOREIGN KEY (benchmark_id)
        REFERENCES analytics.benchmarks(id) ON DELETE RESTRICT
);

CREATE INDEX IF NOT EXISTS ix_abp_pf_period ON analytics.attribution_brinson_period (portfolio_id, from_date, to_date);
CREATE INDEX IF NOT EXISTS ix_abp_bm_period ON analytics.attribution_brinson_period (benchmark_id, from_date, to_date);

COMMENT ON TABLE analytics.attribution_brinson_period IS 'Aggregated (e.g., monthly) attribution vs benchmark by segment';

-- =====================================================================
-- Helpful views (optional, no data duplication)
-- =====================================================================

-- Current benchmark by code for convenience
CREATE OR REPLACE VIEW analytics.v_benchmarks AS
SELECT id as benchmark_id, code, name, base_currency FROM analytics.benchmarks;
